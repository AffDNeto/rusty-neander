; Testes ASR
CLR R0
CCC ZNCV
MOV #STACK R6

JMP START
JMP_ERR:
JMP ERR
START:
; TESTA CARRY
INC R0
MOV #2 R1 
SCC ZN
CCC C
ASR R1  ; 2>> = 1 COM C=0
BCS JMP_ERR
BEQ JMP_ERR
BMI JMP_ERR
MOV R1 -(R6)

INC R0
CCC CZ
SCC N
ASR R1  ; 1>> = 0 COM C=1
BCC JMP_ERR
BNE JMP_ERR
BMI JMP_ERR
MOV R1 -(R6)

INC R0
SCC NC
CCC Z
ASR R1  ; 0>> + C=1 = 0
BMI JMP_ERR
BCS JMP_ERR
BNE JMP_ERR
MOV R1 -(R6)

; TESTA OVERFLOW (XOR ENTRE CARRY E LSB)
INC R0
MOV #1 R1
CCC V
ASR R1  ; 1 XOR 0 = 1
BVC ERR
MOV R1 -(R6)

INC R0
MOV #-2 R1
CCC VC
ASR R1  ; 0 XOR 1 = 1
BVC ERR
MOV R1 -(R6)

INC R0
MOV #2 R1
SCC V
ASR R1  ; 0 XOR 0 = 0
BVS ERR
MOV R1 -(R6)

INC R0
MOV #-1 R1
SCC V
ASR R1  ; 1 XOR 1 = 0
BVS ERR
MOV R1 -(R6)

; FULL CYCLE
INC R0
MOV #17 R2
MOV MAX R1
CCC C
LOOP:
ASR R1
MOV R1 -(R6)
SOB R2,LOOP


; MODOS DE ENDERECAMENTO
;PRE DEC
MOV #T R1
ASR -(R1)   ; escreve em T_PRE_DEC
;POS INC
ASR #0   ; mesmo que INC (R7)+
;INDIRETO
MOV #T R1
ASR (R1)    ; escreve em T
;INDEXADO
ASR 2(R1)   ; escreve em T_IDX
;IND POS INC
MOV #TI_POS_INC TMP
MOV #TMP R1
ASR ((R1)+)
;IND PRE DEC
MOV #TI_PRE_DEC TMP
ASR (-(R1)) ; escreve em TI_PRE_DEC
;IND INDEXADO
MOV #TI_IDX TMP
MOV #TMP R1
INC R1
ASR (-1(R1))   ; escreve em TI_IDX


JMP END
ERR:
MOV #1 E
END:
MOV R0 COUNTER
HLT

ORG 1024
STACK:5
E: 0
COUNTER: 0
MAX: HFFFF
T_PRE_DEC: 1
T: 2
T_IDX:3
TI_POS_INC: 5
TI_PRE_DEC:6
TI_IDX: 7
TMP: 8